datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model User {
  id            String        @id @default(uuid())
  username      String        @unique
  email         String        @unique
  image_hash    String?
  password      String
  created_at    DateTime      @default(now())
  updated_at    DateTime      @default(now())
  totp_seed     String?
  wallets       Wallet[]
  event_members EventMember[]
}

model Wallet {
  id                    String        @id @default(uuid())
  user                  User          @relation(fields: [user_id], references: [id])
  user_id               String
  event                 Event         @relation(fields: [event_id], references: [id])
  event_id              String
  coins                 Int           @default(0)
  tickets               Ticket[]
  transactions_sender   Transaction[] @relation("Sender")
  transactions_receiver Transaction[] @relation("Receiver")

  @@unique([user_id, event_id])
}

model Transaction {
  id              String       @id @default(uuid())
  sender          Wallet?      @relation("Sender", fields: [sender_id], references: [id])
  sender_id       String?
  receiver        Wallet?      @relation("Receiver", fields: [receiver_id], references: [id])
  receiver_id     String?
  event_member    EventMember? @relation(fields: [event_member_id], references: [id])
  event_member_id String?
  amount          Int
  created_at      DateTime     @default(now())
}

model EventMember {
  id           String @id @default(uuid())
  user         User   @relation(fields: [user_id], references: [id])
  user_id      String
  event        Event  @relation(fields: [event_id], references: [id])
  event_id     String
  role         Role
  transactions Transaction[]

  @@unique([user_id, event_id])
}

enum Role {
  creator
  owner
  manager
  moderator
  cashier
}

model Ticket {
  id               String       @id @default(uuid())
  ticket_option    TicketOption @relation(fields: [ticket_option_id], references: [id])
  ticket_option_id String
  wallet           Wallet       @relation(fields: [wallet_id], references: [id])
  wallet_id        String
  purchased_at     DateTime     @default(now())
  scanned_at       DateTime?
}

model TicketOption {
  id             String     @id @default(uuid())
  ticket_date    TicketDate @relation(fields: [ticket_date_id], references: [id])
  ticket_date_id String
  name           String
  price          Float      @default(0)
  amount         Int        @default(-1)
  tickets        Ticket[]
}

model TicketDate {
  id             String         @id @default(uuid())
  event          Event          @relation(fields: [event_id], references: [id])
  event_id       String
  name           String
  valid_from     DateTime?
  valid_until    DateTime?
  amount         Int            @default(-1)
  ticket_options TicketOption[]
}

model Event {
  id                String        @id @default(uuid())
  name              String
  description       String        @default("")
  image_hash        String?
  location          String?
  start_at          DateTime?
  end_at            DateTime?
  tickets_users_max Int?
  is_private        Boolean       @default(true)
  ticket_dates      TicketDate[]
  wallets           Wallet[]
  event_members     EventMember[]
}